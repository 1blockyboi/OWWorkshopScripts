settings
{
	main
	{
		Description: "Created by Block#12425. Version 1.2.0. Brigs fight in an arena to boop each other off! Brig has an upgraded flail to aid in this task. Use the flail to boop oneself into the air or hit another player in the air to send them flying outside the arena! Each player also has hit protection thanks to a 1-hit protection shield, which also allows for longer reaching shield bashes."
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Max FFA Players: 10
		Return To Lobby: Never
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Black Forest
				Black Forest Winter
				Château Guillard
				Château Guillard Halloween
				Havana
				Necropolis
				Petra
				Volskaya Industries
				Workshop Expanse
			}
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 10%
			Score To Win: 15
			Self Initiated Respawn: Off
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		General
		{
			Brigitte
			{
				Barrier Shield Cooldown Time: 300%
				Barrier Shield Recharge Rate: 200%
				Damage Dealt: 500%
				Primary Fire: Off
				Quick Melee: Off
				Repair Pack: Off
				Shield Bash Cooldown Time: 35%
				Ultimate Generation - Combat Rally: 50%
				Ultimate Generation - Passive Rally: 0%
				Whip Shot Cooldown Time: 25%
				Whip Shot Knockback Scalar: 130%
			}

			enabled heroes
			{
				Brigitte
			}
		}
	}
}

variables
{
	global:
		0: lookPositionRandomArray
		1: teleportPosition
		2: xPositive
		3: xNegative
		4: yPositive
		5: yNegative
		6: zPositive
		7: zNegative

	player:
		0: touchedGround
		1: lastAttacker
		2: ultCharge
		5: isDropping
		7: noHelp
		9: flailPosition
		10: eyePosition
}

subroutines
{
	0: death
	1: spawnLaunchPart1
	2: spawnLaunchPart2
	3: spawnLaunchPart3
	4: arenaSetupEdge
	5: arenaSetupFace
	6: arenaSetupCorner
	7: mapSetupNecro
	8: mapSetupPetra
	9: mapSetupExpan
	10: hudSetup
	11: otherSetup
	12: mapSetupVolsk
	13: mapSetupBlack
	14: countdown
	15: mapSetupHavan
	16: mapSetupGuill
	17: arenaSetup
	18: mapCheck
}

disabled rule("Brig's Boopfest! Created by Block#12425. Version 1.2.0.")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Project: workshop.codes/brigboop | Discord: discord.gg/CSKSVDH")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("DEBUG")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Turn rule on if you want to see DEBUG information for HOST PLAYER"
		Create HUD Text(Host Player, Server Load, Null, String("Server Load", Null, Null, Null), Left, 5, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Server Load Average, Null, String("Server Load Average", Null, Null, Null), Left, 5, White, White,
			White, Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Server Load Peak, Null, String("Server Load Peak", Null, Null, Null), Left, 5, White, White, White,
			Visible To and String, Default Visibility);
	}
}

disabled rule("=============================================== SETUP ===============================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Initial Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Setup all HUD elements"
		Call Subroutine(hudSetup);
		"Run the map setup Subroutines"
		Call Subroutine(mapCheck);
		"Other small stuff needed for setup"
		Call Subroutine(otherSetup);
		"Turn this off if you need to debug."
		Disable Inspector Recording;
	}
}

rule("Block#12425 - HUD Setup Subroutine")
{
	event
	{
		Subroutine;
		hudSetup;
	}

	actions
	{
		"HUD message that appears when player is in the air after touching ground."
		Create HUD Text(Filtered Array(All Players(All Teams), And(Compare(Is Using Ultimate(Current Array Element), ==, False), Compare(
			Is In Air(Current Array Element), ==, True))), Custom String("Vulnerable to critical hits", Null, Null, Null), Null, Null, Top,
			1, Orange, White, White, Visible To and String, Default Visibility);
		"This HUD element appears when the player is ulting."
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Is Using Ultimate(Current Array Element), ==, True)), Custom String(
			"Invulnerable", Null, Null, Null), Null, Null, Top, 2, Aqua, White, White, Visible To and String, Default Visibility);
		"HUD Guide."
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, noHelp), ==, False)), Null,
			Null, Custom String("*Boop enemies out of the arena!", Null, Null, Null), Left, 2, White, White, White, Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, noHelp), ==, False)), Null,
			Null, Custom String("*Self boop by hitting a surface while in air.", Null, Null, Null), Left, 2.100, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, noHelp), ==, False)), Null,
			Null, Custom String("*Get critical hits by hitting airborne targets.", Null, Null, Null), Left, 2.200, White, White, White,
			Visible To and String, Default Visibility);
		"Second part of the HUD guide."
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, noHelp), ==, False)), Null,
			Null, Custom String("*Shield Bash travels much farther.", Null, Null, Null), Left, 3, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, noHelp), ==, False)), Null,
			Null, Custom String("*Shield can only take one hit.", Null, Null, Null), Left, 3.100, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, noHelp), ==, False)), Null,
			Null, Custom String("*Shield bash opponents against walls to crush them.", Null, Null, Null), Left, 3.200, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, noHelp), ==, False)), Null,
			Null, Custom String("*Ultimate makes you invulnerable.", Null, Null, Null), Left, 3.300, White, White, White,
			Visible To and String, Default Visibility);
		"This HUD guide element is always present and tells the player what button to press to enable/disable the guide."
		Create HUD Text(All Players(All Teams), Null, Custom String(" ", Null, Null, Null), Custom String(
			"*Press Interact (Default: F) to toggle guide.", Null, Null, Null), Left, 4, White, White, White, Visible To and String,
			Default Visibility);
		"First element HUD of the game title information on the top right corner of the UI."
		Create HUD Text(All Players(All Teams), Custom String("Brig's Boopfest", Null, Null, Null), Null, Null, Right, -4, Orange, White,
			White, Visible To and String, Default Visibility);
		"Second HUD element on the top right corner of the UI."
		Create HUD Text(All Players(All Teams), Null, Custom String("Created by Block#12425. Version: 1.2.0", Null, Null, Null),
			Custom String(" ", Null, Null, Null), Right, -3, White, White, Orange, Visible To and String, Default Visibility);
		"Discord Link HUD element in the top right corner of the UI."
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Join the discord: discord.gg/CSKSVDH (All caps)", Null, Null,
			Null), Right, -2, White, White, Green, Visible To and String, Default Visibility);
		"Project Link HUD element in the top right corner of the HUD."
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Project: workshop.codes/brigboop (lowercase)", Null, Null,
			Null), Right, -1, Green, White, Green, Visible To and String, Default Visibility);
	}
}

rule("Block#12425 - Other Setup")
{
	event
	{
		Subroutine;
		otherSetup;
	}

	actions
	{
		"This is the blue orb at the top of the arena. Players spawn at its location, with the orb only being visible to players touchedGround=True."
		Create Effect(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, touchedGround), ==, True)),
			Orb, Sky Blue, Global Variable(teleportPosition), 3, Visible To Position and Radius);
		"This arrow element in created in the spot where the players are faced. This is to help guide new players on where to land."
		Create Icon(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, touchedGround), ==, False)),
			Value In Array(Global Variable(lookPositionRandomArray), 0), Arrow: Down, Visible To and Position, Sky Blue, True);
		"Along with the arrow, this in-world text is also meant to help encourage new players on where to land."
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, touchedGround), ==,
			False)), Custom String("Land here!", Null, Null, Null), Value In Array(Global Variable(lookPositionRandomArray), 0), 1,
			Do Not Clip, Visible To Position and String, White, Default Visibility);
		"This arrow element in created in the spot where the players are faced. This is to help guide new players on where to land."
		Create Icon(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, touchedGround), ==, False)),
			Value In Array(Global Variable(lookPositionRandomArray), 1), Arrow: Down, Visible To and Position, Sky Blue, True);
		"Along with the arrow, this in-world text is also meant to help encourage new players on where to land."
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, touchedGround), ==,
			False)), Custom String("Land here!", Null, Null, Null), Value In Array(Global Variable(lookPositionRandomArray), 1), 1,
			Do Not Clip, Visible To Position and String, White, Default Visibility);
	}
}

rule("Block#12425 - Pre-match Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		"Assembling heroes setup. Makes sure all values are reset in case the lobby had waiting for players enabled."
		Set Match Time(10);
		Set Player Variable(Event Player, touchedGround, False);
		Set Player Variable(Event Player, isDropping, False);
		Set Player Variable(Event Player, ultCharge, 0);
		Set Player Variable(Event Player, lastAttacker, Null);
		Set Gravity(Event Player, 100);
	}
}

rule("Block#12425 - Match Time Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		"AKA the match time is 20 minutes."
		Set Match Time(1200);
	}
}

rule("Block#12425 - Player Death Setup")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Set Player Variable(Event Player, touchedGround, False);
		Set Player Variable(Event Player, lastAttacker, Null);
		"This preserves the ult charge after death. This is also set because the ultimate charge is reset on respawn."
		Set Player Variable(Event Player, ultCharge, Ultimate Charge Percent(Event Player));
		Set Ultimate Charge(Event Player, 0);
	}
}

rule("Block#12425 - Objective Description Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		"This being run at each respawn just ensures that the player sees this proper description, as sometimes it doesn't load for new players."
		Set Objective Description(Event Player, Custom String("Boop enemies out of the arena", Null, Null, Null), Visible To and String);
	}
}

disabled rule("=============================================== MAP SETUP ===============================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Map Check Subroutine")
{
	event
	{
		Subroutine;
		mapCheck;
	}

	actions
	{
		"This giant if/else if/else logic statement helps optimize the load by testing for each map and then running the respective subroutine for the map."
		If(Compare(Current Map, ==, Map(Necropolis)));
			Call Subroutine(mapSetupNecro);
		Else If(Compare(Current Map, ==, Map(Petra)));
			Call Subroutine(mapSetupPetra);
		Else If(Compare(Current Map, ==, Map(Volskaya Industries)));
			Call Subroutine(mapSetupVolsk);
		"OR statement is present because two maps (Black Forest and its Winter Variant) use the same layout."
		Else If(Or(Compare(Current Map, ==, Map(Black Forest)), Compare(Current Map, ==, Map(Black Forest Winter))));
			Call Subroutine(mapSetupBlack);
		"OR statement is present because two maps (Black Forest and its Winter Variant) use the same layout."
		Else If(Or(Compare(Current Map, ==, Map(Château Guillard)), Compare(Current Map, ==, Map(Château Guillard Halloween))));
			Call Subroutine(mapSetupGuill);
		Else If(Compare(Current Map, ==, Map(Havana)));
			Call Subroutine(mapSetupHavan);
		"This is in case the map is either Workshop Expanse or an unofficially selected map."
		Else;
			Call Subroutine(mapSetupExpan);
		End;
		Call Subroutine(arenaSetup);
	}
}

rule("Block#12425 - Map Setup (Necropolis) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupNecro;
	}

	actions
	{
		Set Global Variable(lookPositionRandomArray, Empty Array);
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(0.415, 11.605, -22.069));
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(0.415, 11.605, 22.069));
		"Where respawning players teleport to. This is also where the blue orb is located."
		Set Global Variable(teleportPosition, Vector(-0.543, 41.515, 0));
		"X-axis front side of arena."
		Set Global Variable(xPositive, 24);
		"X-axis back side of arena."
		Set Global Variable(xNegative, -23);
		"Y-axis front side of arena."
		Set Global Variable(yPositive, 32);
		"Y-axis back side of arena."
		Set Global Variable(yNegative, 6);
		"Z-axis front side of arena."
		Set Global Variable(zPositive, 39.451);
		"Z-axis back side of arena."
		Set Global Variable(zNegative, -38);
	}
}

rule("Block#12425 - Map Setup (Petra) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupPetra;
	}

	actions
	{
		Set Global Variable(lookPositionRandomArray, Empty Array);
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(6.230, -10.995, 46.414));
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(28.819, -9.683, 27.225));
		Set Global Variable(teleportPosition, Vector(40.487, 18.305, 72.646));
		Set Global Variable(xPositive, 47.063);
		Set Global Variable(xNegative, -3.306);
		Set Global Variable(yPositive, 12.745);
		Set Global Variable(yNegative, -14);
		Set Global Variable(zPositive, 72.308);
		Set Global Variable(zNegative, 19.729);
	}
}

rule("Block#12425 - Map Setup (Workshop Expanse) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupExpan;
	}

	actions
	{
		Set Global Variable(lookPositionRandomArray, Empty Array);
		"Check mapSetupNecro rule for information on variables."
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(0, 0, 0));
		"Check mapSetupNecro rule for information on variables."
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(0, 0, 0));
		Set Global Variable(teleportPosition, Vector(20, 30, 0));
		Set Global Variable(xPositive, 25);
		Set Global Variable(xNegative, -25);
		Set Global Variable(yPositive, 20);
		Set Global Variable(yNegative, -5);
		Set Global Variable(zPositive, 25);
		Set Global Variable(zNegative, -25);
	}
}

rule("Block#12425 - Map Setup (Volskaya Industries) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupVolsk;
	}

	actions
	{
		Set Global Variable(lookPositionRandomArray, Empty Array);
		"Position where the respawning player faces before launch. Arrow and \"Land Here!\" message are located here."
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(3.609, 2.375, 94.321));
		"Position where the respawning player faces before launch. Arrow and \"Land Here!\" message are located here."
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(-13.693, -3.239, 90.608));
		Set Global Variable(teleportPosition, Vector(-12.457, 19.004, 59.736));
		Set Global Variable(xPositive, 14.983);
		Set Global Variable(xNegative, -29.699);
		Set Global Variable(yPositive, 14);
		Set Global Variable(yNegative, -5.774);
		Set Global Variable(zPositive, 127.262);
		Set Global Variable(zNegative, 66);
	}
}

rule("Block#12425 - Map Setup (Black Forest) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupBlack;
	}

	actions
	{
		Set Global Variable(lookPositionRandomArray, Empty Array);
		"Position where the respawning player faces before launch. Arrow and \"Land Here!\" message are located here."
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(-7.821, 19.681, -10.792));
		"Position where the respawning player faces before launch. Arrow and \"Land Here!\" message are located here."
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(-7.820, 19.674, 20.548));
		Set Global Variable(teleportPosition, Vector(-46.898, 37.261, 4.124));
		Set Global Variable(xPositive, 8.954);
		Set Global Variable(xNegative, -45);
		Set Global Variable(yPositive, 30.398);
		Set Global Variable(yNegative, 8);
		Set Global Variable(zPositive, 31.510);
		Set Global Variable(zNegative, -21.510);
	}
}

rule("Block#12425 - Map Setup (Chateau Guillard) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupGuill;
	}

	actions
	{
		Set Global Variable(lookPositionRandomArray, Empty Array);
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(205.093, 10.291, 56.081));
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(176.029, 7.455, 58.772));
		Set Global Variable(teleportPosition, Vector(191.309, 29.660, 41.124));
		Set Global Variable(xPositive, 240);
		Set Global Variable(xNegative, 156.614);
		Set Global Variable(yPositive, 26.868);
		Set Global Variable(yNegative, 4);
		Set Global Variable(zPositive, 79.229);
		Set Global Variable(zNegative, 35.772);
	}
}

rule("Block#12425 - Map Setup (Havana) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupHavan;
	}

	actions
	{
		Set Global Variable(lookPositionRandomArray, Empty Array);
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(94.324, 7.490, -47.556));
		Modify Global Variable(lookPositionRandomArray, Append To Array, Vector(90.879, 4.396, -80.969));
		Set Global Variable(teleportPosition, Vector(115.981, 27.649, -72.724));
		Set Global Variable(xPositive, 116);
		Set Global Variable(xNegative, 75);
		Set Global Variable(yPositive, 29.068);
		Set Global Variable(yNegative, -4.092);
		Set Global Variable(zPositive, -36.484);
		Set Global Variable(zNegative, -97.080);
	}
}

disabled rule("============================================ ARENA CONSTRUCTION ============================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Arena Setup Subroutine")
{
	event
	{
		Subroutine;
		arenaSetup;
	}

	actions
	{
		"Setup all Arena Effects"
		Call Subroutine(arenaSetupEdge);
		Call Subroutine(arenaSetupFace);
		Call Subroutine(arenaSetupCorner);
	}
}

rule("Block#12425 - Boundary Box Edge Construction Subroutine")
{
	event
	{
		Subroutine;
		arenaSetupEdge;
	}

	actions
	{
		"BOX EDGES: (x,y,z) -> (x,-y,z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xPositive), Global Variable(yNegative), Add(0.001, Global Variable(
			zPositive))), Red, Visible To);
		"(x,y,-z) -> (x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xPositive), Global Variable(yNegative), Add(0.001, Global Variable(
			zNegative))), Red, Visible To);
		"(-x,y,-z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xNegative), Global Variable(yNegative), Add(0.001, Global Variable(
			zNegative))), Red, Visible To);
		"(-x,y,z) -> (-x,-y,z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yNegative), Add(0.001, Global Variable(
			zPositive))), Red, Visible To);
		"(x,y,z) -> (-x,y,z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yPositive), Global Variable(zPositive)), Red,
			Visible To);
		"(x,-y,z) -> (-x,-y,z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yNegative),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zPositive)), Red,
			Visible To);
		"(x,y,-z) -> (-x,y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xNegative), Global Variable(yPositive), Global Variable(zNegative)), Red,
			Visible To);
		"(x,-y,-z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yNegative),
			Global Variable(zNegative)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
		"(x,y,z) -> (x,y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xPositive), Global Variable(yPositive), Global Variable(zNegative)), Red,
			Visible To);
		"(x,-y,z) -> (x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yNegative),
			Global Variable(zPositive)), Vector(Global Variable(xPositive), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
		"(-x,y,z) -> (-x,y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yPositive), Global Variable(zNegative)), Red,
			Visible To);
		"(-x,-y,z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yNegative),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
	}
}

rule("Block#12425 - Boundary Box Face Construction Subroutine")
{
	event
	{
		Subroutine;
		arenaSetupFace;
	}

	actions
	{
		"This subroutine creates the faces of the arena. (x,y,-z) -> (-x,y,z) (Face Y)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xNegative), Global Variable(yPositive), Global Variable(zPositive)), Red,
			Visible To);
		"(x,y,z) -> (-x,y,-z) (Face Y)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yPositive), Global Variable(zNegative)), Red,
			Visible To);
		"(x,y,-z) -> (x,-y,z) (Face X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xPositive), Global Variable(yNegative), Global Variable(zPositive)), Red,
			Visible To);
		"(x,y,z) -> (x,-y,-z) (Face X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xPositive), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
		"(-x,y,-z) -> (-x,-y,z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zPositive)), Red,
			Visible To);
		"(-x,y,z) -> (-x,-y,-z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
		"(x,y,z) -> (-x,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zPositive)), Red,
			Visible To);
		"(-x,y,z) -> (x,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive),
			Global Variable(zPositive)), Vector(Global Variable(xPositive), Global Variable(yNegative), Global Variable(zPositive)), Red,
			Visible To);
		"(x,-y,z) -> (-x,-y,-z) (Face -Y)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yNegative),
			Global Variable(zPositive)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
		"(x,-y,-z) -> (-x,-y,z) (Face -Y)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yNegative),
			Global Variable(zNegative)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zPositive)), Red,
			Visible To);
		"(x,y,-z) -> (-x,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
		"(-x,y,-z) -> (x,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive),
			Global Variable(zNegative)), Vector(Global Variable(xPositive), Global Variable(yNegative), Global Variable(zNegative)), Red,
			Visible To);
		"MIDPOINT FACE HORIZONTAL: (x,midpoint,-z) -> (-x,midpoint,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zNegative)), Vector(Global Variable(xNegative), Divide(Add(Global Variable(
			yPositive), Global Variable(yNegative)), 2), Global Variable(zNegative)), Red, Visible To);
		"(x,midpoint,z) -> (-x,midpoint,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zPositive)), Vector(Global Variable(xNegative), Divide(Add(Global Variable(
			yPositive), Global Variable(yNegative)), 2), Global Variable(zPositive)), Red, Visible To);
		"(x,midpoint,-z) -> (x,midpoint,z) (Face X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zNegative)), Vector(Global Variable(xPositive), Divide(Add(Global Variable(
			yPositive), Global Variable(yNegative)), 2), Global Variable(zPositive)), Red, Visible To);
		"(-x,midpoint,-z) -> (-x,midpoint,z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zNegative)), Vector(Global Variable(xNegative), Divide(Add(Global Variable(
			yPositive), Global Variable(yNegative)), 2), Global Variable(zPositive)), Red, Visible To);
		"MIDPOINT FACE VERTICAL: (midpoint,y,z) -> (midpoint,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Add(Divide(Add(Global Variable(xPositive), Global Variable(xNegative)),
			2), 0.001), Global Variable(yPositive), Global Variable(zPositive)), Vector(Divide(Add(Global Variable(xPositive),
			Global Variable(xNegative)), 2), Global Variable(yNegative), Global Variable(zPositive)), Red, Visible To);
		"(midpoint,y,-z) -> (midpoint,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Add(Divide(Add(Global Variable(xPositive), Global Variable(xNegative)),
			2), 0.001), Global Variable(yPositive), Global Variable(zNegative)), Vector(Divide(Add(Global Variable(xPositive),
			Global Variable(xNegative)), 2), Global Variable(yNegative), Global Variable(zNegative)), Red, Visible To);
		"(x,y,midpoint) -> (x,-y,midpoint) (Face X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xPositive), Global Variable(yPositive), Add(Divide(Add(
			Global Variable(zPositive), Global Variable(zNegative)), 2), 0.001)), Vector(Global Variable(xPositive), Global Variable(
			yNegative), Divide(Add(Global Variable(zPositive), Global Variable(zNegative)), 2)), Red, Visible To);
		"(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)"
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(Global Variable(xNegative), Global Variable(yPositive), Add(Divide(Add(
			Global Variable(zPositive), Global Variable(zNegative)), 2), 0.001)), Vector(Global Variable(xNegative), Global Variable(
			yNegative), Divide(Add(Global Variable(zPositive), Global Variable(zNegative)), 2)), Red, Visible To);
	}
}

rule("Block#12425 - Boundary Box Corner Construction Subroutine")
{
	event
	{
		Subroutine;
		arenaSetupCorner;
	}

	actions
	{
		"CORNERS: (x,y,z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Global Variable(yPositive), Global Variable(
			zPositive)), 5, Visible To);
		"(-x,y,z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Global Variable(yPositive), Global Variable(
			zPositive)), 1, Visible To);
		"(x,-y,z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Global Variable(yNegative), Global Variable(
			zPositive)), 1, Visible To);
		"(x,y,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Global Variable(yPositive), Global Variable(
			zNegative)), 1, Visible To);
		"(-x,-y,z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(
			zPositive)), 1, Visible To);
		"(x,-y,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Global Variable(yNegative), Global Variable(
			zNegative)), 1, Visible To);
		"(-x,y,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Global Variable(yPositive), Global Variable(
			zNegative)), 1, Visible To);
		"(-x,-y,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Global Variable(yNegative), Global Variable(
			zNegative)), 1, Visible To);
		"MIDPOINT ORBS HORIZONTAL: (x, midpoint, z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zPositive)), 5, Visible To);
		"(-x,midpoint,z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zPositive)), 5, Visible To);
		"(x,midpoint,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zNegative)), 5, Visible To);
		"(-x,midpoint,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Divide(Add(Global Variable(yPositive),
			Global Variable(yNegative)), 2), Global Variable(zNegative)), 5, Visible To);
		"MIDPOINT ORBS VERTICAL: (midpoint, y, z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Divide(Add(Global Variable(xPositive), Global Variable(xNegative)), 2),
			Global Variable(yPositive), Global Variable(zPositive)), 5, Visible To);
		"(midpoint,-y,z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Divide(Add(Global Variable(xPositive), Global Variable(xNegative)), 2),
			Global Variable(yNegative), Global Variable(zPositive)), 5, Visible To);
		"(midpoint,y,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Divide(Add(Global Variable(xPositive), Global Variable(xNegative)), 2),
			Global Variable(yPositive), Global Variable(zNegative)), 5, Visible To);
		"(midpoint,-y,-z)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Divide(Add(Global Variable(xPositive), Global Variable(xNegative)), 2),
			Global Variable(yNegative), Global Variable(zNegative)), 5, Visible To);
		"(x,y,midpoint)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Global Variable(yPositive), Divide(Add(
			Global Variable(zPositive), Global Variable(zNegative)), 2)), 5, Visible To);
		"(x,-y,midpoint)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xPositive), Global Variable(yNegative), Divide(Add(
			Global Variable(zPositive), Global Variable(zNegative)), 2)), 5, Visible To);
		"(-x,y,midpoint)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Global Variable(yPositive), Divide(Add(
			Global Variable(zPositive), Global Variable(zNegative)), 2)), 5, Visible To);
		"(-x,-y,midpoint)"
		Create Effect(All Players(All Teams), Orb, Red, Vector(Global Variable(xNegative), Global Variable(yNegative), Divide(Add(
			Global Variable(zPositive), Global Variable(zNegative)), 2)), 5, Visible To);
	}
}

disabled rule("=============================================== SPAWN SETUP ===============================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Spawn Sequence")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Or(Compare(Is Game In Progress, ==, True), Compare(Is Waiting For Players, ==, True)) == True;
	}

	actions
	{
		"This first part sets up the launching by setting up the player's stats and position"
		Call Subroutine(spawnLaunchPart1);
		Wait(0.500, Abort When False);
		"Ok, now the game can safely set up everything else, and start a countdown for the player alongside the wait time."
		Call Subroutine(spawnLaunchPart2);
		Start Rule(countdown, Do Nothing);
		"This is how long the player can take to aim."
		Wait(3, Ignore Condition);
		"And this set's up the player for landing."
		Call Subroutine(spawnLaunchPart3);
	}
}

rule("Block#12425 - Spawn Launch Part 1 Subroutine")
{
	event
	{
		Subroutine;
		spawnLaunchPart1;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 9999);
		Set Player Variable(Event Player, isDropping, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Gravity(Event Player, 0);
		Big Message(Event Player, Custom String("Aim your launch!", Null, Null, Null));
		Set Invisible(Event Player, Enemies);
		Set Status(Event Player, Null, Phased Out, 9999);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Teleport(Event Player, Global Variable(teleportPosition));
	}
}

rule("Block#12425 - Spawn Launch Part 2 Subroutine")
{
	event
	{
		Subroutine;
		spawnLaunchPart2;
	}

	actions
	{
		If(Compare(Current Map, ==, Map(Necropolis)));
			If(Compare(Count Of(Players Within Radius(Value In Array(Global Variable(lookPositionRandomArray), 0), 10, All Teams, Off)), <=,
				Count Of(Players Within Radius(Value In Array(Global Variable(lookPositionRandomArray), 1), 10, All Teams, Off))));
				Set Facing(Event Player, Direction Towards(Event Player, Value In Array(Global Variable(lookPositionRandomArray), 0)), To World);
			Else;
				Set Facing(Event Player, Direction Towards(Event Player, Value In Array(Global Variable(lookPositionRandomArray), 1)), To World);
			End;
		Else;
			"Orients the player into the proper direction in case they are afk."
			Set Facing(Event Player, Direction Towards(Event Player, Random Value In Array(Global Variable(lookPositionRandomArray))),
				To World);
	}
}

rule("Block#12425 - Spawn Launch Part 3 Subroutine")
{
	event
	{
		Subroutine;
		spawnLaunchPart3;
	}

	actions
	{
		"This is the actual launch. This also sets up the following rule for touching the ground."
		Play Effect(All Players(All Teams), Good Explosion, Sky Blue, Global Variable(teleportPosition), 5);
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Event Player, 50);
		Stop Forcing Throttle(Event Player);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 70, To World, Incorporate Contrary Motion);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 70, To World, Incorporate Contrary Motion);
		Set Player Variable(Event Player, isDropping, True);
		Set Invisible(Event Player, None);
		Set Gravity(Event Player, 100);
	}
}

rule("Block#12425 - Countdown Subroutine")
{
	event
	{
		Subroutine;
		countdown;
	}

	actions
	{
		Small Message(Event Player, Custom String("3", Null, Null, Null));
		Wait(1, Ignore Condition);
		Small Message(Event Player, Custom String("2", Null, Null, Null));
		Wait(1, Ignore Condition);
		Small Message(Event Player, Custom String("1", Null, Null, Null));
	}
}

rule("Block#12425 - Spawn Touched Ground")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, touchedGround) == False;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Player Variable(Event Player, isDropping) == True;
		Is On Ground(Event Player) == True;
		Or(Compare(Is Game In Progress, ==, True), Compare(Is Waiting For Players, ==, True)) == True;
	}

	actions
	{
		"Once the player has touched the ground after being set up in the spawn launch, this sets everything up, including being detected by the arena again."
		Set Gravity(Event Player, 100);
		Set Ability 1 Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Apply Impulse(Event Player, Vector(0, -1, 0), 20, To Player, Cancel Contrary Motion);
		Set Player Variable(Event Player, touchedGround, True);
		Set Ultimate Charge(Event Player, Player Variable(Event Player, ultCharge));
		Clear Status(Event Player, Phased Out);
		Play Effect(All Players(All Teams), Ring Explosion, Orange, Position Of(Event Player), 5);
	}
}

disabled rule("=============================================== ARENA DEATH ===============================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Side X+ Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Is Game In Progress, Is Waiting For Players) == True;
		X Component Of(Position Of(Event Player)) >= Global Variable(xPositive);
		Player Variable(Event Player, touchedGround) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Basically each of these rules detects for a different side of the arena, and if the player passes one of them, the subroutine death is called."
		Call Subroutine(death);
	}
}

rule("Block#12425 - Side X- Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Is Game In Progress, Is Waiting For Players) == True;
		X Component Of(Position Of(Event Player)) <= Global Variable(xNegative);
		Player Variable(Event Player, touchedGround) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(death);
	}
}

rule("Block#12425 - Side Y+ Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) >= Global Variable(yPositive);
		Or(Is Game In Progress, Is Waiting For Players) == True;
		Player Variable(Event Player, touchedGround) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(death);
	}
}

rule("Block#12425 - Side Y- Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) <= Global Variable(yNegative);
		Or(Is Game In Progress, Is Waiting For Players) == True;
		Player Variable(Event Player, touchedGround) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(death);
	}
}

rule("Block#12425 - Side Z+ Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Is Game In Progress, Is Waiting For Players) == True;
		Z Component Of(Position Of(Event Player)) >= Global Variable(zPositive);
		Player Variable(Event Player, touchedGround) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(death);
	}
}

rule("Block#12425 - Side Z- Death")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Is Game In Progress, Is Waiting For Players) == True;
		Z Component Of(Position Of(Event Player)) <= Global Variable(zNegative);
		Player Variable(Event Player, touchedGround) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(death);
	}
}

rule("Block#12425 - Kill Player Subroutine")
{
	event
	{
		Subroutine;
		death;
	}

	actions
	{
		"This subroutine occurs whenever the player passes a side of the arena after touching the ground."
		Clear Status(Event Player, Unkillable);
		Wait(0.100, Ignore Condition);
		Kill(Event Player, Player Variable(Event Player, lastAttacker));
		Play Effect(All Players(All Teams), Good Explosion, Red, Position Of(Event Player), 5);
	}
}

disabled rule("=============================================== BRIG MECHANICS ===============================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Speed-Boosted Shield Bash")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		"This shield bash is done by increasing the speed of the player temporarily so the player covers further distance. The wait time is approximated for how long a shield bash lasts."
		Set Move Speed(Event Player, 200);
		Wait(0.250, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Block#12425 - Shield Crush")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Status(Victim, Stunned) == True;
		Is Alive(Victim) == True;
		Is Using Ability 1(Event Player) == False;
		Distance Between(Eye Position(Victim), Ray Cast Hit Position(Eye Position(Victim), Add(Eye Position(Victim), Multiply(Vector(
			X Component Of(Facing Direction Of(Event Player)), 0, Z Component Of(Facing Direction Of(Event Player))), 5)), Null,
			All Players(All Teams), False)) <= 1.800;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Clear Status(Victim, Unkillable);
		Wait(0.100, Ignore Condition);
		Kill(Victim, Event Player);
		Small Message(Victim, Custom String("Crushed!", Null, Null, Null));
		Small Message(Event Player, Custom String("Crushed enemy!", Null, Null, Null));
	}
}

rule("Block#12425 - Flail Self-Boop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is On Ground(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
		Player Variable(Event Player, touchedGround) == True;
	}

	actions
	{
		"This self-boop is a little complicated. So, here, this sets up the flail position for where the game thinks the flail will land after a certain amount of time."
		Set Player Variable(Event Player, flailPosition, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player),
			Multiply(Facing Direction Of(Event Player), 22)), All Players(All Teams), Event Player, True));
		"This eye position is set up as a reference point for later."
		Set Player Variable(Event Player, eyePosition, Eye Position(Event Player));
		"The wait time is determined by how long the game thinks it will take for the flail of the player to land. It determines this by measuring the distance between the player's eye position and the flailPosition divided by 80, the meters per second of the flail"
		Wait(Divide(Distance Between(Eye Position(Event Player), Player Variable(Event Player, flailPosition)), 80), Abort When False);
		"A new flail position is measured after being translated from the old position by how much the player has moved since then. If the new flail position does not connect to a surface, no impulse is applied. If it does go through a surface, impulse is applied."
		Skip If(Compare(Distance Between(Player Variable(Event Player, eyePosition), Ray Cast Hit Position(Eye Position(Event Player),
			Subtract(Player Variable(Event Player, flailPosition), Subtract(Eye Position(Event Player), Player Variable(Event Player,
			eyePosition))), All Players(All Teams), Event Player, True)), >, 20), 2);
		"The impulse to self is applied in the direction of the new flail position (in reference to the old flail position) to the eye position."
		Apply Impulse(Event Player, Multiply(Direction Towards(Eye Position(Event Player), Subtract(Player Variable(Event Player,
			flailPosition), Subtract(Eye Position(Event Player), Player Variable(Event Player, eyePosition)))), -1), 20, To World,
			Cancel Contrary Motion);
	}
}

rule("Block#12425 - Damage Dealt to Player")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	actions
	{
		"This will track the last attacker of the player in case the player dies within a certain time period."
		Set Player Variable(Event Player, lastAttacker, Attacker);
		"This is to keep the players health topped off, as the damage is higher and self-healing may not fully work."
		Heal(Event Player, Null, 5000);
	}
}

rule("Block#12425 - Player Hit in Air")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is In Air(Victim) == True;
	}

	actions
	{
		"This rule applies an impulse to the victim if the victim is in the air. This is a critical hit. If the hit is blocked by the victim's shield, then the hit doesn't count as damage and the impulse isn't applied."
		Play Effect(All Players(All Teams), Good Explosion, Orange, Position Of(Victim), 1);
		Apply Impulse(Victim, Direction Towards(Event Player, Victim), 40, To World, Cancel Contrary Motion);
		Small Message(Event Player, Custom String("Critical Hit!", Null, Null, Null));
		Small Message(Victim, Custom String("Critically hit!", Null, Null, Null));
	}
}

rule("Block#12425 - Attacker Clear At Ground Touch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
	}

	actions
	{
		"If the player stays on the ground for 1 second, then lastAttacker is cleared and any other death without any hits will count as a suicide."
		Wait(1, Abort When False);
		Set Player Variable(Event Player, lastAttacker, Null);
	}
}

rule("Block#12425 - Player Started Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Player Variable(Event Player, touchedGround) == True;
	}

	actions
	{
		"The ult makes the player phased out, essentially making the player untouchable by anyone."
		Set Status(Event Player, Null, Phased Out, 9999);
	}
}

rule("Block#12425 - Player Ult Ended")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Player Variable(Event Player, touchedGround) == True;
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
	}
}

disabled rule("=============================================== OTHER ===============================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Toggle Instructions")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		If(Compare(Player Variable(Event Player, noHelp), ==, False));
			"Turns off instructions that display on top left corner."
			Set Player Variable(Event Player, noHelp, True);
		Else;
			"Turns on instructions in top left corner."
			Set Player Variable(Event Player, noHelp, False);
		End;
		"So players cannot accidentally spam it."
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Block#12425 - Timer Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Count Of(All Players(All Teams)) == 0;
	}

	actions
	{
		Wait(0.150, Ignore Condition);
		Pause Match Time;
		Set Match Time(1200);
	}
}

rule("Block#12425 - Timer Start")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Count Of(All Players(All Teams)) > 0;
	}

	actions
	{
		Unpause Match Time;
	}
}