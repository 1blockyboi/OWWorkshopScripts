settings
{
	main
	{
		Description: "This is Captain Conflict! This mode is based on the mode Light vs. Dark from Kid Icarus Uprising. Kill 20 enemies in order to summon their captain. The team captain has more health than normal, but once he is killed, the game is over. Created by Block#12425. Version: 1.0.2"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Team 1 Players: 3
		Max Team 2 Players: 3
	}

	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Black Forest
				Black Forest Winter
				Castillo
				Ecopoint: Antarctica
				Necropolis
			}
		}

		General
		{
			Score To Win: 1
			Spawn Health Packs: Enabled
		}
	}
}

variables
{
	global:
		0: isTeam1CaptainChosen
		1: isTeam2CaptainChosen
		2: isTeam1CaptainSpawned
		3: isTeam2CaptainSpawned
		4: lives
		6: team1Captain
		7: team2Captain

	player:
		12: isBeingRevived
		14: playerBeingRevived
}

subroutines
{
	0: team1Victory
	1: team2Victory
	2: mercyRevive
	3: mercyFailed
}

disabled rule("CAPTAIN CONFLICT. Version 1.0.2. Created by Block#12425.")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Project Link: bit.ly/OWWCAPCON | Discord: discord.gg/CSKSVDH")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("======================================= Setup =======================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Initial Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Scoring;
		Set Global Variable(lives, 20);
		Create Effect(Filtered Array(All Players(All Teams), Compare(Global Variable(isTeam1CaptainSpawned), ==, True)), Good Aura, Team 1,
			Global Variable(team1Captain), 1.500, Visible To Position and Radius);
		Create Effect(Filtered Array(All Players(All Teams), Compare(Global Variable(isTeam2CaptainSpawned), ==, True)), Good Aura, Team 2,
			Global Variable(team2Captain), 1.500, Visible To Position and Radius);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Global Variable(isTeam1CaptainSpawned), ==, True)), Health(
			Global Variable(team1Captain)), Global Variable(team1Captain), Custom String("Health", Null, Null, Null), Left, Multiply(-1,
			Normalized Health(Global Variable(team1Captain))), Team 1, White, White, Visible To Sort Order and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Global Variable(isTeam2CaptainSpawned), ==, True)), Health(
			Global Variable(team2Captain)), Global Variable(team2Captain), Custom String("Health", Null, Null, Null), Left, Multiply(-1,
			Normalized Health(Global Variable(team2Captain))), Team 2, White, White, Visible To Sort Order and String, Default Visibility);
		disabled Create HUD Text(Filtered Array(All Players(All Teams), Compare(Global Variable(isTeam1CaptainSpawned), ==, True)), Health(
			Global Variable(team1Captain)), Global Variable(team1Captain), Custom String("Health", Null, Null, Null), Left, 0, Team 1,
			White, White, Visible To and String, Default Visibility);
		disabled Create HUD Text(Filtered Array(All Players(Team 2), Compare(Global Variable(isTeam2CaptainSpawned), ==, True)), Health(
			Global Variable(team2Captain)), Global Variable(team2Captain), Custom String("Health", Null, Null, Null), Left, -1, Team 2,
			White, White, Visible To and String, Default Visibility);
		Create HUD Text(Global Variable(team1Captain), Custom String("You are the captain!", Null, Null, Null), Null, Null, Top, 1, Team 1,
			White, White, Visible To and String, Default Visibility);
		Create HUD Text(Global Variable(team2Captain), Custom String("You are the captain!", Null, Null, Null), Null, Null, Top, 1, Team 2,
			White, White, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Captain Conflict", Null, Null, Null), Null, Null, Right, -3, White, White,
			White, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("Created by Block#12425. Version 1.0.2.", Null, Null, Null),
			Custom String(" ", Null, Null, Null), Right, -2, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Project: workshop.codes/captconf (lowercase)", Null, Null,
			Null), Right, -1, White, White, Green, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Join the discord: discord.gg/CSKSVDH (All caps)", Null, Null,
			Null), Right, 0, White, White, Green, Visible To and String, Default Visibility);
	}
}

rule("Block#12425 - Team Score Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Team Score(Team 1, Global Variable(lives));
		Set Team Score(Team 2, Global Variable(lives));
	}
}

disabled rule("======================================= Team Kills =======================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Team 1 Killed an Enemy")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Global Variable(isTeam2CaptainChosen) == False;
		Is Game In Progress == True;
	}

	actions
	{
		Modify Team Score(Team 2, -1);
	}
}

rule("Block#12425 - Team 2 Killed an Enemy")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Global Variable(isTeam1CaptainChosen) == False;
		Is Game In Progress == True;
	}

	actions
	{
		Modify Team Score(Team 1, -1);
	}
}

disabled rule("======================================= Team Captain =======================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Team 2 Captain Spawns")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Team Score(Team 2) <= 1;
		Global Variable(isTeam2CaptainChosen) == False;
		Is Game In Progress == True;
	}

	actions
	{
		Set Global Variable(isTeam2CaptainChosen, True);
		Set Global Variable(team2Captain, Event Player);
		Set Max Health(Global Variable(team2Captain), 300);
		Set Healing Received(Global Variable(team2Captain), 50);
	}
}

rule("Block#12425 - Team 1 Captain Spawns")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Team Score(Team 1) <= 1;
		Global Variable(isTeam1CaptainChosen) == False;
		Is Game In Progress == True;
	}

	actions
	{
		Set Global Variable(isTeam1CaptainChosen, True);
		Set Global Variable(team1Captain, Event Player);
		Set Max Health(Global Variable(team1Captain), 300);
		Set Healing Received(Global Variable(team1Captain), 50);
	}
}

rule("Block#12425 - Phase 2 for Team 1 Begins")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(Global Variable(team1Captain)) == True;
		Is Alive(Global Variable(team1Captain)) == True;
		Global Variable(isTeam1CaptainChosen) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Set Global Variable(isTeam1CaptainSpawned, True);
		Heal(Global Variable(team1Captain), Null, 10000);
		Big Message(Global Variable(team1Captain), Custom String("Do not die! You are the captain!", Null, Null, Null));
		Big Message(Filtered Array(All Players(Team 1), Compare(Current Array Element, !=, Global Variable(team1Captain))), String(
			"{0} {1}", String("Protect", Null, Null, Null), Global Variable(team1Captain), Null));
		Big Message(All Players(Team 2), String("{0} {1}", String("Kill", Null, Null, Null), Global Variable(team1Captain), Null));
	}
}

rule("Block#12425 - Phase 2 for Team 2 Begins")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(Global Variable(team2Captain)) == True;
		Is Alive(Global Variable(team2Captain)) == True;
		Global Variable(isTeam2CaptainChosen) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Set Global Variable(isTeam2CaptainSpawned, True);
		Heal(Global Variable(team2Captain), Null, 10000);
		Big Message(Global Variable(team2Captain), Custom String("Do not die! You are the captain!", Null, Null, Null));
		Big Message(Filtered Array(All Players(Team 2), Compare(Current Array Element, !=, Global Variable(team2Captain))), String(
			"{0} {1}", String("Protect", Null, Null, Null), Global Variable(team2Captain), Null));
		Big Message(All Players(Team 1), String("{0} {1}", String("Kill", Null, Null, Null), Global Variable(team2Captain), Null));
	}
}

rule("Block#12425 - Team 1 Captain Dies. Team 2 Wins")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Compare(Event Player, ==, Global Variable(team1Captain)) == True;
		Global Variable(isTeam1CaptainSpawned) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(team2Victory);
	}
}

rule("Block#12425 - Team 2 Captain Dies. Team 1 Wins")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Compare(Event Player, ==, Global Variable(team2Captain)) == True;
		Global Variable(isTeam2CaptainSpawned) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(team1Victory);
	}
}

rule("Block#12425 - Team 1 Captain Disconnects. Team 2 Wins")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Global Variable(isTeam1CaptainSpawned) == True;
		Entity Exists(Global Variable(team1Captain)) == False;
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(team2Victory);
	}
}

rule("Block#12425 - Team 2 Leader Disconnects. Team 1 Wins")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Global Variable(isTeam2CaptainSpawned) == True;
		Entity Exists(Global Variable(team2Captain)) == False;
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(team1Victory);
	}
}

disabled rule("======================================= Objective Description =======================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Objective Description Set Phase 1 for both teams")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Global Variable(isTeam1CaptainSpawned) != True;
		Global Variable(isTeam2CaptainSpawned) != True;
	}

	actions
	{
		Set Objective Description(Event Player, Custom String("Kill enemies", Null, Null, Null), Visible To and String);
	}
}

rule("Block#12425 - Objective Description Set Phase 1 for Enemy and Phase 2 for Ally (Team 1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Global Variable(isTeam1CaptainSpawned) == True;
		Global Variable(isTeam2CaptainSpawned) != True;
	}

	actions
	{
		Set Objective Description(Event Player, String("{0} and {1}", Custom String("Kill enemies", Null, Null, Null), String("{0} {1}",
			String("Protect", Null, Null, Null), Global Variable(team1Captain), Null), Null), Visible To and String);
	}
}

rule("Block#12425 - Objective Description Set Phase 2 for both teams (Team 1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Global Variable(isTeam1CaptainSpawned) == True;
		Global Variable(isTeam2CaptainSpawned) == True;
	}

	actions
	{
		Set Objective Description(Event Player, String("{0} and {1}", String("{0} {1}", String("Kill", Null, Null, Null), Global Variable(
			team2Captain), Null), String("{0} {1}", String("Protect", Null, Null, Null), Global Variable(team1Captain), Null), Null),
			Visible To and String);
	}
}

rule("Block#12425 - Objective Description Set Phase 1 for Ally and Phase 2 for Enemy (Team 1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Global Variable(isTeam1CaptainSpawned) != True;
		Global Variable(isTeam2CaptainSpawned) == True;
	}

	actions
	{
		Set Objective Description(Event Player, String("{0} {1}", String("Kill", Null, Null, Null), Global Variable(team2Captain), Null),
			Visible To and String);
	}
}

rule("Block#12425 - Objective Description Set Phase 1 for Enemy and Phase 2 for Ally (Team 2)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Global Variable(isTeam1CaptainSpawned) != True;
		Global Variable(isTeam2CaptainSpawned) == True;
	}

	actions
	{
		Set Objective Description(Event Player, String("{0} and {1}", Custom String("Kill enemies", Null, Null, Null), String("{0} {1}",
			String("Protect", Null, Null, Null), Global Variable(team2Captain), Null), Null), Visible To and String);
	}
}

rule("Block#12425 - Objective Description Set Phase 2 for both teams (Team 2)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Global Variable(isTeam1CaptainSpawned) == True;
		Global Variable(isTeam2CaptainSpawned) == True;
	}

	actions
	{
		Set Objective Description(Event Player, String("{0} and {1}", String("{0} {1}", String("Kill", Null, Null, Null), Global Variable(
			team1Captain), Null), String("{0} {1}", String("Protect", Null, Null, Null), Global Variable(team2Captain), Null), Null),
			Visible To and String);
	}
}

rule("Block#12425 - Objective Description Set Phase 1 for Ally and Phase 2 for Enemy (Team 2)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Global Variable(isTeam1CaptainSpawned) == True;
		Global Variable(isTeam2CaptainSpawned) != True;
	}

	actions
	{
		Set Objective Description(Event Player, String("{0} {1}", String("Kill", Null, Null, Null), Global Variable(team1Captain), Null),
			Visible To and String);
	}
}

disabled rule("======================================= Mercy Revive =======================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Mercy Started Revive (Team 1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Using Ability 2(Event Player) == True;
		Is Game In Progress == True;
		Global Variable(isTeam1CaptainChosen) != True;
	}

	actions
	{
		Set Player Variable(Event Player, playerBeingRevived, Filtered Array(All Dead Players(Team Of(Event Player)), Compare(
			Player Closest To Reticle(Event Player, Team Of(Event Player)), ==, Current Array Element)));
		Set Player Variable(Player Variable(Event Player, playerBeingRevived), isBeingRevived, True);
	}
}

rule("Block#12424 - Mercy Revive Successful (Team 1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, isBeingRevived) == True;
		Global Variable(isTeam1CaptainChosen) != True;
	}

	actions
	{
		Call Subroutine(mercyRevive);
	}
}

rule("Block#12425 - Mercy Revive Failed (Team 1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Using Ability 2(Event Player) == False;
		Is Game In Progress == True;
		Player Variable(Player Variable(Event Player, playerBeingRevived), isBeingRevived) == True;
		Global Variable(isTeam1CaptainChosen) != True;
	}

	actions
	{
		Call Subroutine(mercyFailed);
	}
}

rule("Block#12425 - Mercy Started Revive (Team 2)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Using Ability 2(Event Player) == True;
		Is Game In Progress == True;
		Global Variable(isTeam2CaptainChosen) != True;
	}

	actions
	{
		Set Player Variable(Event Player, playerBeingRevived, Filtered Array(All Dead Players(Team Of(Event Player)), Compare(
			Player Closest To Reticle(Event Player, Team Of(Event Player)), ==, Current Array Element)));
		Set Player Variable(Player Variable(Event Player, playerBeingRevived), isBeingRevived, True);
	}
}

rule("Block#12424 - Mercy Revive Successful (Team 2)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, isBeingRevived) == True;
		Global Variable(isTeam2CaptainChosen) != True;
	}

	actions
	{
		Call Subroutine(mercyRevive);
	}
}

rule("Block#12425 - Mercy Revive Failed (Team 2)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Using Ability 2(Event Player) == False;
		Is Game In Progress == True;
		Player Variable(Player Variable(Event Player, playerBeingRevived), isBeingRevived) == True;
		Global Variable(isTeam2CaptainChosen) != True;
	}

	actions
	{
		Call Subroutine(mercyFailed);
	}
}

rule("Block#12425 - Mercy Successful Revive Subroutine")
{
	event
	{
		Subroutine;
		mercyRevive;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Set Player Variable(Event Player, isBeingRevived, False);
		Modify Team Score(Team Of(Event Player), 1);
	}
}

rule("Block#12425 - Mercy Revive Failed Subroutine")
{
	event
	{
		Subroutine;
		mercyFailed;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Player Variable(Player Variable(Event Player, playerBeingRevived), isBeingRevived, False);
	}
}

disabled rule("======================================= Victory =======================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Prevent Draw (Team 1)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time <= 0;
		Team Score(Team 1) > Team Score(Team 2);
	}

	actions
	{
		Call Subroutine(team1Victory);
	}
}

rule("Block#12425 - Prevent Draw (Team 2)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time <= 0;
		Team Score(Team 2) > Team Score(Team 1);
	}

	actions
	{
		Call Subroutine(team2Victory);
	}
}

rule("Block#12425 - Declare Team 1 Victory Subroutine")
{
	event
	{
		Subroutine;
		team1Victory;
	}

	actions
	{
		Declare Team Victory(Team 1);
	}
}

rule("Block#12425 - Declare Team 2 Victory Subroutine")
{
	event
	{
		Subroutine;
		team2Victory;
	}

	actions
	{
		Declare Team Victory(Team 2);
	}
}