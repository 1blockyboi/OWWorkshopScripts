settings
{
	main
	{
		Description: "A modified version of 12 Hooks 1 Hole. Roadhog has a different ult solely for recovery. Use it right as you are about to fall to your doom to save yourself! Safe Zones allow you to be completely safe from the outside world. Teleport between them with the Interact Key (F), or view a top down angle of the well with Crouch! Modification created by Block#12425. Version: 1.2.8"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Max Spectators: 6
		Return To Lobby: Never
	}

	modes
	{
		Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 40
			Self Initiated Respawn: Off

			enabled maps
			{
				Ilios Well
			}
		}

		disabled Team Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 200
		}

		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 0%
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		General
		{
			Roadhog
			{
				Chain Hook Cooldown Time: 0%
				Damage Dealt: 10%
				Damage Received: 10%
				Healing Dealt: 10%
				Healing Received: 10%
				Jump Vertical Speed: 200%
				Movement Gravity: 130%
				Movement Speed: 140%
				Primary Fire: Off
				Receive Headshots Only: On
				Secondary Fire: Off
				Take a Breather: Off
				Ultimate Generation - Combat Whole Hog: 0%
				Ultimate Generation - Passive Whole Hog: 0%
				Ultimate Generation Whole Hog: 10%
				Whole Hog Knockback Scalar: 0%
			}

			enabled heroes
			{
				Roadhog
			}
		}
	}
}

variables
{
	global:
		0: wellPosition
		1: spawn1Position
		2: spawn2Position
		5: spawn3Position
		6: spawn4Position
		7: spawn1Radius
		8: spawn2Radius
		9: spawn3Radius
		10: spawn4Radius
		25: facePosition

	player:
		0: randomSpawnInteger
}

subroutines
{
	0: variableSetup
	1: effectSetup
	2: hudSetup
	3: setFacing
}

disabled rule("12 Hooks 1 Hole: When Pigs Fly! by Block#12425. Version: 1.2.8")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Link to mode: http://bit.ly/OWWPIGSFLY | Discord: https://discord.gg/CSKSVDH")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("DEBUG")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Host Player, Facing Direction Of(Host Player), Null, Null, Left, 0, White, White, White, Visible To and String,
			Default Visibility);
		Create HUD Text(Host Player, Server Load, String("Server Load", Null, Null, Null), Null, Left, 0, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Server Load Average, String("Server Load Average", Null, Null, Null), Null, Left, 0, White, White,
			White, Visible To and String, Default Visibility);
		Create HUD Text(Host Player, Server Load Peak, String("Server Load Peak", Null, Null, Null), Null, Left, 0, White, White, White,
			Visible To and String, Default Visibility);
	}
}

disabled rule("DEBUG DUMMY BOT SPAWN")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Melee) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Roadhog), All Teams, -1.000, Event Player, Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Teleport(Last Created Entity, Event Player);
		Wait(0.500, Ignore Condition);
	}
}

disabled rule("========================================= Setup =========================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Initial Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(10);
		"This subroutine initializes the variables."
		Call Subroutine(variableSetup);
		"This subroutine creates all the effects in the game."
		Call Subroutine(effectSetup);
		"This subroutine creates all the HUD text in the game."
		Call Subroutine(hudSetup);
	}
}

rule("Block#12425 - Variable Setup Subroutine")
{
	event
	{
		Subroutine;
		variableSetup;
	}

	actions
	{
		"Well Position is used the for the top-down camera."
		Set Global Variable(wellPosition, Vector(-208.410, 8.159, -16.380));
		"These four actions set the position for each spawn point."
		Set Global Variable(spawn1Position, Vector(-192.910, 2.665, -0.990));
		Set Global Variable(spawn2Position, Vector(-225.753, 0.604, -34.020));
		Set Global Variable(spawn3Position, Vector(-222.717, 2.576, 1.581));
		Set Global Variable(spawn4Position, Vector(-190.352, 2.537, -30.310));
		"These four actions set the radius of each spawn point."
		Set Global Variable(spawn1Radius, 5);
		Set Global Variable(spawn2Radius, 6);
		Set Global Variable(spawn3Radius, 5);
		Set Global Variable(spawn4Radius, 5);
		"This variable is the position that the camera looks at."
		Set Global Variable(facePosition, Vector(X Component Of(Global Variable(wellPosition)), Subtract(Y Component Of(Global Variable(
			wellPosition)), 5), Z Component Of(Global Variable(wellPosition))));
	}
}

rule("Block#12425 - Effect Creation Subroutine")
{
	event
	{
		Subroutine;
		effectSetup;
	}

	actions
	{
		"These four effects are for the spawn points."
		Create Effect(All Players(All Teams), Sphere, Blue, Global Variable(spawn1Position), Global Variable(spawn1Radius),
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Orange, Global Variable(spawn2Position), Global Variable(spawn2Radius),
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Green, Global Variable(spawn3Position), Global Variable(spawn3Radius),
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Red, Global Variable(spawn4Position), Global Variable(spawn4Radius),
			Visible To Position and Radius);
		"These four in world texts are used for the spawn points when the player is outside of them."
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn1Position), Position Of(
			Current Array Element)), >, Global Variable(spawn1Radius))), String("{0} {1}", String("Safe", Null, Null, Null), String("Zone",
			Null, Null, Null), Null), Global Variable(spawn1Position), 1.500, Clip Against Surfaces, Visible To Position and String, White,
			Default Visibility);
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn2Position), Position Of(
			Current Array Element)), >, Global Variable(spawn2Radius))), String("{0} {1}", String("Safe", Null, Null, Null), String("Zone",
			Null, Null, Null), Null), Global Variable(spawn2Position), 1.500, Clip Against Surfaces, Visible To Position and String, White,
			Default Visibility);
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn3Position), Position Of(
			Current Array Element)), >, Global Variable(spawn3Radius))), String("{0} {1}", String("Safe", Null, Null, Null), String("Zone",
			Null, Null, Null), Null), Global Variable(spawn3Position), 1.500, Clip Against Surfaces, Visible To Position and String, White,
			Default Visibility);
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn4Position), Position Of(
			Current Array Element)), >, Global Variable(spawn4Radius))), String("{0} {1}", String("Safe", Null, Null, Null), String("Zone",
			Null, Null, Null), Null), Global Variable(spawn4Position), 1.500, Clip Against Surfaces, Visible To Position and String, White,
			Default Visibility);
	}
}

rule("Block#12425 - HUD Setup Subroutine")
{
	event
	{
		Subroutine;
		hudSetup;
	}

	actions
	{
		"These four HUD texts tell the player that they can use INTERACT to teleport between the zones. Each one is for a different spawn zone."
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn1Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn1Radius))), Custom String("Interact: Teleport to another spawn", Null, Null,
			Null), Null, Null, Top, 1, Blue, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn2Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn2Radius))), Custom String("Interact: Teleport to another spawn", Null, Null,
			Null), Null, Null, Top, 1, Orange, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn3Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn3Radius))), Custom String("Interact: Teleport to another spawn", Null, Null,
			Null), Null, Null, Top, 1, Green, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn4Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn4Radius))), Custom String("Interact: Teleport to another spawn", Null, Null,
			Null), Null, Null, Top, 1, Red, White, White, Visible To and String, Default Visibility);
		"These four actions tell the player to use crouch to enable the top-down camera. Each one is for a different spawn zone."
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn1Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn1Radius))), Custom String("Crouch: Top-Down View of Well", Null, Null, Null),
			Null, Null, Top, 2, Blue, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn2Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn2Radius))), Custom String("Crouch: Top-Down View of Well", Null, Null, Null),
			Null, Null, Top, 2, Orange, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn3Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn3Radius))), Custom String("Crouch: Top-Down View of Well", Null, Null, Null),
			Null, Null, Top, 2, Green, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Compare(Distance Between(Global Variable(spawn4Position), Position Of(
			Current Array Element)), <=, Global Variable(spawn4Radius))), Custom String("Crouch: Top-Down View of Well", Null, Null, Null),
			Null, Null, Top, 2, Red, White, White, Visible To and String, Default Visibility);
		"These last four HUD texts are for the top right to let the player know what it is, who made it, and links to external web sites."
		Create HUD Text(All Players(All Teams), Custom String("12 Hooks 1 Hole: When Pigs Fly!", Null, Null, Null), Null, Null, Right,
			-5.000, Orange, White, Orange, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("Created by Block#12425. Version: 1.2.8", Null, Null, Null),
			Custom String(" ", Null, Null, Null), Right, -4.000, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Join the Discord: discord.gg/CSKSVDH (ALL CAPS)", Null, Null,
			Null), Right, -3.000, White, White, Green, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Please Like on: bit.ly/OWWPIGSFLY (All Caps)", Null, Null,
			Null), Right, -2.000, White, White, Green, Visible To and String, Default Visibility);
	}
}

rule("Block#12425 - Initial Player Setup")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		"When a player joins, this variable is set so that the player spawns in a random spawn zone."
		Set Player Variable(Event Player, randomSpawnInteger, Random Integer(0, 3));
	}
}

rule("Block#12425 - Player Death Setup")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		"Just like when a player joins, this is also reset when a player dies."
		Set Player Variable(Event Player, randomSpawnInteger, Random Integer(0, 3));
	}
}

disabled rule("========================================= Roadhog Ult =========================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Roadhog Ult Start")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"In 1.2.8, this ult became more merciful by providing an impulse at ult start. This impulse helps the player immediately start going upward."
		Apply Impulse(Event Player, Vector(0, 1, 0), 5, To Player, Cancel Contrary Motion);
		"This causes the player to go faster the longer they use the ult."
		Start Accelerating(Event Player, Up, 70, 10, To Player, Direction Rate and Max Speed);
		"The player is forced to look downward when using the ult. The actions are simply too buggy for a dynamic camera during the ult."
		Start Facing(Event Player, Vector(Multiply(X Component Of(Facing Direction Of(Event Player)), 0.010), -1.000, Multiply(
			Z Component Of(Facing Direction Of(Event Player)), 0.010)), 400, To World, Direction and Turn Rate);
		"This wait action basically sets how long the ult will last."
		Wait(1.700, Abort When False);
		"This quick stun makes no sound effect, but ends the ult."
		Set Status(Event Player, Null, Stunned, 0.015);
	}
}

rule("Block#12425 - Roadhog Ult End")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) != True;
	}

	actions
	{
		"When the ult ends, the player is restored back to normal."
		Stop Accelerating(Event Player);
		Stop Facing(Event Player);
	}
}

rule("Block#12425 - Roadhog Kill (Ult -> 100%)")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		"There is no ult charge, but when a player kills another, it is a guaranteed ult charge given to them."
		Set Ultimate Charge(Event Player, 100);
	}
}

disabled rule("========================================= Safe Zone =========================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Block#12425 - Player Spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		"This if/else if logic statement tests the randomSpawnInteger to see which location the game should teleport them to."
		If(Compare(Player Variable(Event Player, randomSpawnInteger), ==, 0));
			Teleport(Event Player, Global Variable(spawn1Position));
		Else If(Compare(Player Variable(Event Player, randomSpawnInteger), ==, 1));
			Teleport(Event Player, Global Variable(spawn2Position));
		Else If(Compare(Player Variable(Event Player, randomSpawnInteger), ==, 2));
			Teleport(Event Player, Global Variable(spawn3Position));
		Else;
			Teleport(Event Player, Global Variable(spawn4Position));
		End;
		"This subroutine is called to set the player appropriately in the right direction."
		Call Subroutine(setFacing);
	}
}

rule("Block#12425 - Player In Safe Zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"This giant OR test basically is testing if the player is in any of the spawns."
		Or(Or(Compare(Distance Between(Global Variable(spawn1Position), Position Of(Event Player)), <=, Global Variable(spawn1Radius)),
			Compare(Distance Between(Global Variable(spawn2Position), Position Of(Event Player)), <=, Global Variable(spawn2Radius))), Or(
			Compare(Distance Between(Global Variable(spawn3Position), Position Of(Event Player)), <=, Global Variable(spawn3Radius)),
			Compare(Distance Between(Global Variable(spawn4Position), Position Of(Event Player)), <=, Global Variable(spawn4Radius))))
			== True;
	}

	actions
	{
		"If so, the player is both invincible, invisible and cannot interact much with the outside world."
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Invisible(Event Player, Enemies);
		Set Ability 1 Enabled(Event Player, False);
	}
}

rule("Block#12425 - Player Outside of Safe Zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		And(And(Compare(Distance Between(Global Variable(spawn1Position), Position Of(Event Player)), >, Global Variable(spawn1Radius)),
			Compare(Distance Between(Global Variable(spawn2Position), Position Of(Event Player)), >, Global Variable(spawn2Radius))), And(
			Compare(Distance Between(Global Variable(spawn3Position), Position Of(Event Player)), >, Global Variable(spawn3Radius)),
			Compare(Distance Between(Global Variable(spawn4Position), Position Of(Event Player)), >, Global Variable(spawn4Radius))))
			== True;
	}

	actions
	{
		"If so, the invincibility, invisibily are disabled, player can use hook again, and any camera going is stopped."
		Clear Status(Event Player, Phased Out);
		Set Invisible(Event Player, None);
		Set Ability 1 Enabled(Event Player, True);
		Stop Camera(Event Player);
	}
}

rule("Block#12425 - Teleport Player to another zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Or(Or(Compare(Distance Between(Global Variable(spawn1Position), Position Of(Event Player)), <=, Global Variable(spawn1Radius)),
			Compare(Distance Between(Global Variable(spawn2Position), Position Of(Event Player)), <=, Global Variable(spawn2Radius))), Or(
			Compare(Distance Between(Global Variable(spawn3Position), Position Of(Event Player)), <=, Global Variable(spawn3Radius)),
			Compare(Distance Between(Global Variable(spawn4Position), Position Of(Event Player)), <=, Global Variable(spawn4Radius))))
			== True;
	}

	actions
	{
		"This if/else if logic statement will teleport the player to another spawn location depending on which zone they are in."
		If(Compare(Distance Between(Global Variable(spawn1Position), Position Of(Event Player)), <=, Global Variable(spawn1Radius)));
			Teleport(Event Player, Global Variable(spawn4Position));
		Else If(Compare(Distance Between(Global Variable(spawn4Position), Position Of(Event Player)), <=, Global Variable(spawn4Radius)));
			Teleport(Event Player, Global Variable(spawn2Position));
		Else If(Compare(Distance Between(Global Variable(spawn2Position), Position Of(Event Player)), <=, Global Variable(spawn2Radius)));
			Teleport(Event Player, Global Variable(spawn3Position));
		Else If(Compare(Distance Between(Global Variable(spawn3Position), Position Of(Event Player)), <=, Global Variable(spawn3Radius)));
			Teleport(Event Player, Global Variable(spawn1Position));
		End;
		"After that, the player is set facing the well."
		Call Subroutine(setFacing);
		"This wait is here to prevent the player from spamming the teleport action."
		Wait(0.500, Ignore Condition);
	}
}

rule("Block#12425 - Start Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Or(Or(Compare(Distance Between(Global Variable(spawn1Position), Position Of(Event Player)), <=, Global Variable(spawn1Radius)),
			Compare(Distance Between(Global Variable(spawn2Position), Position Of(Event Player)), <=, Global Variable(spawn2Radius))), Or(
			Compare(Distance Between(Global Variable(spawn3Position), Position Of(Event Player)), <=, Global Variable(spawn3Radius)),
			Compare(Distance Between(Global Variable(spawn4Position), Position Of(Event Player)), <=, Global Variable(spawn4Radius))))
			== True;
	}

	actions
	{
		"If the player crouches while in a zone, a top down camera is started."
		Start Camera(Event Player, Vector(-208.319, 20, -16.289), Global Variable(wellPosition), 0);
	}
}

rule("Block#12425 - Stop Camera (No Crouch)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == False;
	}

	actions
	{
		"If the camera isn't stopped from the player leaving the zone, then the player must have let go the crouch key in order to stop it."
		Stop Camera(Event Player);
	}
}

rule("Block#12425 - Set Facing Subroutine")
{
	event
	{
		Subroutine;
		setFacing;
	}

	actions
	{
		"This subroutine sets the player facing towards the well. This wait action gives the player some time to teleport before running the set facing action."
		Wait(0.010, Ignore Condition);
		Set Facing(Event Player, Direction Towards(Position Of(Event Player), Global Variable(facePosition)), To World);
	}
}